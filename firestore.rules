rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if email is verified
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // Profile collection rules
    match /Profile/{userId} {
      // Users can read their own profile (even if it doesn't exist yet)
      allow read: if isOwner(userId);
      
      // Users can create their own profile if email is verified
      allow create: if isOwner(userId) && isEmailVerified();
      
      // Users can update their own profile if email is verified
      allow update: if isOwner(userId) && isEmailVerified();
      
      // Users cannot delete profiles (for data integrity)
      allow delete: if false;
      
      // Sites subcollection
      match /Sites/{siteId} {
        // Owner can read, write their own sites
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isEmailVerified();
        
        // Snags subcollection
        match /Snags/{snagId} {
          allow read: if isOwner(userId);
          allow write: if isOwner(userId) && isEmailVerified();
        }
      }
    }
    
    // Storage rules for profile images would go in storage.rules
    // These are just the Firestore rules
  }
}