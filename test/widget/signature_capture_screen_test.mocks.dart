// Mocks generated by Mockito 5.4.6 from annotations
// in snagsnapper/test/widget/signature_capture_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;
import 'dart:typed_data' as _i5;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:snagsnapper/services/signature_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSize_0 extends _i1.SmartFake implements _i2.Size {
  _FakeSize_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SignatureService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignatureService extends _i1.Mock implements _i3.SignatureService {
  MockSignatureService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<List<_i2.Offset>> get strokes =>
      (super.noSuchMethod(
            Invocation.getter(#strokes),
            returnValue: <List<_i2.Offset>>[],
          )
          as List<List<_i2.Offset>>);

  @override
  bool get hasContent =>
      (super.noSuchMethod(Invocation.getter(#hasContent), returnValue: false)
          as bool);

  @override
  void startNewStroke() => super.noSuchMethod(
    Invocation.method(#startNewStroke, []),
    returnValueForMissingStub: null,
  );

  @override
  void addPoint(_i2.Offset? point) => super.noSuchMethod(
    Invocation.method(#addPoint, [point]),
    returnValueForMissingStub: null,
  );

  @override
  void addPointWithBounds(_i2.Offset? point, _i2.Size? canvasSize) =>
      super.noSuchMethod(
        Invocation.method(#addPointWithBounds, [point, canvasSize]),
        returnValueForMissingStub: null,
      );

  @override
  bool isPointInBounds(_i2.Offset? point, _i2.Size? canvasSize) =>
      (super.noSuchMethod(
            Invocation.method(#isPointInBounds, [point, canvasSize]),
            returnValue: false,
          )
          as bool);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i5.Uint8List?> generateImage(_i2.Size? canvasSize) =>
      (super.noSuchMethod(
            Invocation.method(#generateImage, [canvasSize]),
            returnValue: _i4.Future<_i5.Uint8List?>.value(),
          )
          as _i4.Future<_i5.Uint8List?>);

  @override
  _i4.Future<_i5.Uint8List?> generateCroppedImage(_i2.Size? canvasSize) =>
      (super.noSuchMethod(
            Invocation.method(#generateCroppedImage, [canvasSize]),
            returnValue: _i4.Future<_i5.Uint8List?>.value(),
          )
          as _i4.Future<_i5.Uint8List?>);

  @override
  _i4.Future<_i5.Uint8List?> generateJpegImage(
    _i2.Size? canvasSize,
    int? quality,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateJpegImage, [canvasSize, quality]),
            returnValue: _i4.Future<_i5.Uint8List?>.value(),
          )
          as _i4.Future<_i5.Uint8List?>);

  @override
  _i2.Size calculateCanvasSize(double? screenWidth, [double? screenHeight]) =>
      (super.noSuchMethod(
            Invocation.method(#calculateCanvasSize, [
              screenWidth,
              screenHeight,
            ]),
            returnValue: _FakeSize_0(
              this,
              Invocation.method(#calculateCanvasSize, [
                screenWidth,
                screenHeight,
              ]),
            ),
          )
          as _i2.Size);

  @override
  String generateSignaturePath(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#generateSignaturePath, [userId]),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#generateSignaturePath, [userId]),
            ),
          )
          as String);

  @override
  _i4.Future<String?> saveSignature(String? userId, _i5.Uint8List? imageData) =>
      (super.noSuchMethod(
            Invocation.method(#saveSignature, [userId, imageData]),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<bool> deleteSignature(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSignature, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> signatureExists(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#signatureExists, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i7.File?> getSignatureFile(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getSignatureFile, [userId]),
            returnValue: _i4.Future<_i7.File?>.value(),
          )
          as _i4.Future<_i7.File?>);
}
