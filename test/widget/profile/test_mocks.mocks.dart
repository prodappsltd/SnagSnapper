// Mocks generated by Mockito 5.4.6 from annotations
// in snagsnapper/test/widget/profile/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:snagsnapper/Data/models/sync_queue_item.dart' as _i3;
import 'package:snagsnapper/Data/models/sync_result.dart' as _i2;
import 'package:snagsnapper/Data/models/sync_status.dart' as _i7;
import 'package:snagsnapper/services/image_storage_service.dart' as _i8;
import 'package:snagsnapper/services/sync_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSyncResult_0 extends _i1.SmartFake implements _i2.SyncResult {
  _FakeSyncResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueueStatus_1 extends _i1.SmartFake implements _i3.QueueStatus {
  _FakeQueueStatus_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_2 extends _i1.SmartFake implements _i4.File {
  _FakeFile_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i5.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  bool get isSyncing =>
      (super.noSuchMethod(Invocation.getter(#isSyncing), returnValue: false)
          as bool);

  @override
  _i6.Stream<_i7.SyncStatus> get statusStream =>
      (super.noSuchMethod(
            Invocation.getter(#statusStream),
            returnValue: _i6.Stream<_i7.SyncStatus>.empty(),
          )
          as _i6.Stream<_i7.SyncStatus>);

  @override
  _i6.Stream<double> get progressStream =>
      (super.noSuchMethod(
            Invocation.getter(#progressStream),
            returnValue: _i6.Stream<double>.empty(),
          )
          as _i6.Stream<double>);

  @override
  _i6.Stream<_i7.SyncError> get errorStream =>
      (super.noSuchMethod(
            Invocation.getter(#errorStream),
            returnValue: _i6.Stream<_i7.SyncError>.empty(),
          )
          as _i6.Stream<_i7.SyncError>);

  @override
  _i6.Future<void> initialize(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [userId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void setupAutoSync() => super.noSuchMethod(
    Invocation.method(#setupAutoSync, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i2.SyncResult> syncNow() =>
      (super.noSuchMethod(
            Invocation.method(#syncNow, []),
            returnValue: _i6.Future<_i2.SyncResult>.value(
              _FakeSyncResult_0(this, Invocation.method(#syncNow, [])),
            ),
          )
          as _i6.Future<_i2.SyncResult>);

  @override
  void cancelSync() => super.noSuchMethod(
    Invocation.method(#cancelSync, []),
    returnValueForMissingStub: null,
  );

  @override
  void pauseSync() => super.noSuchMethod(
    Invocation.method(#pauseSync, []),
    returnValueForMissingStub: null,
  );

  @override
  void resumeSync() => super.noSuchMethod(
    Invocation.method(#resumeSync, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateStatus(_i7.SyncStatus? status) => super.noSuchMethod(
    Invocation.method(#updateStatus, [status]),
    returnValueForMissingStub: null,
  );

  @override
  void updateProgress(double? progress) => super.noSuchMethod(
    Invocation.method(#updateProgress, [progress]),
    returnValueForMissingStub: null,
  );

  @override
  void handleError(_i7.SyncError? error) => super.noSuchMethod(
    Invocation.method(#handleError, [error]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> onAppForeground() =>
      (super.noSuchMethod(
            Invocation.method(#onAppForeground, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onForceLogout(Function? callback) => super.noSuchMethod(
    Invocation.method(#onForceLogout, [callback]),
    returnValueForMissingStub: null,
  );

  @override
  void onSyncComplete(Function? callback) => super.noSuchMethod(
    Invocation.method(#onSyncComplete, [callback]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.QueueStatus> getQueueStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getQueueStatus, []),
            returnValue: _i6.Future<_i3.QueueStatus>.value(
              _FakeQueueStatus_1(this, Invocation.method(#getQueueStatus, [])),
            ),
          )
          as _i6.Future<_i3.QueueStatus>);

  @override
  _i6.Future<_i2.SyncResult> syncBatch(List<String>? userIds) =>
      (super.noSuchMethod(
            Invocation.method(#syncBatch, [userIds]),
            returnValue: _i6.Future<_i2.SyncResult>.value(
              _FakeSyncResult_0(this, Invocation.method(#syncBatch, [userIds])),
            ),
          )
          as _i6.Future<_i2.SyncResult>);

  @override
  _i6.Future<void> performBackgroundSync(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#performBackgroundSync, [userId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> syncProfile(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#syncProfile, [userId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> syncProfileImage(String? userId, String? localPath) =>
      (super.noSuchMethod(
            Invocation.method(#syncProfileImage, [userId, localPath]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> syncSignatureImage(String? userId, String? localPath) =>
      (super.noSuchMethod(
            Invocation.method(#syncSignatureImage, [userId, localPath]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i7.SyncStatus> checkSyncStatus(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#checkSyncStatus, [userId]),
            returnValue: _i6.Future<_i7.SyncStatus>.value(_i7.SyncStatus.idle),
          )
          as _i6.Future<_i7.SyncStatus>);

  @override
  _i6.Future<void> simulateOffline() =>
      (super.noSuchMethod(
            Invocation.method(#simulateOffline, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> simulateOnline() =>
      (super.noSuchMethod(
            Invocation.method(#simulateOnline, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> simulateReconnect() =>
      (super.noSuchMethod(
            Invocation.method(#simulateReconnect, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> simulateFirebaseOutage() =>
      (super.noSuchMethod(
            Invocation.method(#simulateFirebaseOutage, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> restoreFirebaseService() =>
      (super.noSuchMethod(
            Invocation.method(#restoreFirebaseService, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ImageStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageStorageService extends _i1.Mock
    implements _i8.ImageStorageService {
  MockImageStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> saveProfileImage(_i4.File? imageFile, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#saveProfileImage, [imageFile, userId]),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#saveProfileImage, [imageFile, userId]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String?> getProfileImagePath(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getProfileImagePath, [userId]),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> deleteProfileImage(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProfileImage, [userId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String> saveSignatureImage(_i4.File? imageFile, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#saveSignatureImage, [imageFile, userId]),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#saveSignatureImage, [imageFile, userId]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String?> getSignatureImagePath(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getSignatureImagePath, [userId]),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> deleteSignatureImage(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSignatureImage, [userId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String> relativeToAbsolute(String? relativePath) =>
      (super.noSuchMethod(
            Invocation.method(#relativeToAbsolute, [relativePath]),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#relativeToAbsolute, [relativePath]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String absoluteToRelative(String? absolutePath) =>
      (super.noSuchMethod(
            Invocation.method(#absoluteToRelative, [absolutePath]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#absoluteToRelative, [absolutePath]),
            ),
          )
          as String);

  @override
  _i6.Future<_i4.File> getImageFile(String? imagePath) =>
      (super.noSuchMethod(
            Invocation.method(#getImageFile, [imagePath]),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_2(this, Invocation.method(#getImageFile, [imagePath])),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  _i6.Future<void> cleanupOrphanedFiles(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOrphanedFiles, [userId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getUserStorageSize(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserStorageSize, [userId]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i10.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i10.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i6.Stream<List<_i10.ConnectivityResult>>.empty(),
          )
          as _i6.Stream<List<_i10.ConnectivityResult>>);

  @override
  _i6.Future<List<_i10.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i6.Future<List<_i10.ConnectivityResult>>.value(
              <_i10.ConnectivityResult>[],
            ),
          )
          as _i6.Future<List<_i10.ConnectivityResult>>);
}
